(define (domain aliens)
(:requirements :typing :durative-actions :fluents :duration-inequalities)

(:predicates
	(invasion-started)
	(rome-bombed)
	(drone1-fly)
	(drone2-busy)
	(ship-fly-one)
	(ship-fly-none)
	(ny-bombed)
	(ship-fly-two)
	(invasion-ongoing)
	(drone2-fly)
	(london-bombed)
	(ship-fly)
	(paris-bombed)
	(drone2-undocking)
	(above-whitehouse)
	(drone1-busy)
	(drone2-first-undock)
	(first-time)
	(drone1-undocking)
	(drone1-first-undock)
	(sf-bombed)
)

(:functions
	(ship-x)
	(drone1-x)
	(drone2-x)
	(drone2-y)
	(drone1-y)
	(ship-y)
)

(:control-variable vx-ship
	:bounds (and (>= ?value -20.0) (<= ?value 20.0))
)
(:control-variable vy-drone1
	:bounds (and (>= ?value -20.0) (<= ?value 20.0))
)
(:control-variable vy-drone2
	:bounds (and (>= ?value -20.0) (<= ?value 20.0))
)
(:control-variable warp-speed
	:bounds (and (>= ?value -10000000.0) (<= ?value 10000000.0))
)
(:control-variable vy-ship
	:bounds (and (>= ?value -20.0) (<= ?value 20.0))
)
(:control-variable vx-drone2
	:bounds (and (>= ?value -20.0) (<= ?value 20.0))
)
(:control-variable vx-drone1
	:bounds (and (>= ?value -20.0) (<= ?value 20.0))
)


(:region rome-region
	:parameters (?x ?y)
	:condition (and (in-rect (?x ?y) :corner (332 382) :width 32 :height 32))
)
(:region ship-range
	:parameters (?x1 ?y1 ?x2 ?y2)
	:condition (and (max-distance ((?x1 ?y1) (?x2 ?y2)) :d 24))
)
(:region earth
	:parameters (?x ?y)
	:condition (and (in-rect (?x ?y) :corner (0 0) :width 1280 :height 1024))
)
(:region wdc-region
	:parameters (?x ?y)
	:condition (and (in-rect (?x ?y) :corner (982 482) :width 32 :height 32))
)
(:region sf-region
	:parameters (?x ?y)
	:condition (and (in-rect (?x ?y) :corner (1132 102) :width 32 :height 32))
)
(:region paris-region
	:parameters (?x ?y)
	:condition (and (in-rect (?x ?y) :corner (732 82) :width 32 :height 32))
)
(:region ny-region
	:parameters (?x ?y)
	:condition (and (in-rect (?x ?y) :corner (682 782) :width 32 :height 32))
)
(:region london-region
	:parameters (?x ?y)
	:condition (and (in-rect (?x ?y) :corner (92 182) :width 32 :height 32))
)

(:durative-action undock-drone1
	:parameters ()
	:duration (and (>= ?duration 0.01) (<= ?duration 0.03))
	:condition (and
		(at start (invasion-ongoing))
		(at end (invasion-ongoing))
		(at start (ship-fly))
		(over all (ship-fly))
		(at end (ship-fly))
		(at start (drone1-first-undock))
		(at start (not (drone1-fly)))
		(at start (not (drone1-undocking)))
		(at end (inside (ship-range (ship-x) (ship-y) (drone1-x) (drone1-y))))
		(at end (drone1-fly))
	)
	:effect (and
		(at start (drone1-undocking))
		(at end (not (drone1-undocking)))
		(at end (not (drone1-first-undock)))
		(increase (drone1-x) (* 1 (warp-speed) #t))
		(increase (drone1-y) (* 1 (warp-speed) #t))
	)
)
(:durative-action bomb-rome2
	:parameters ()
	:duration (and (>= ?duration 0.1) (<= ?duration 0.1))
	:condition (and
		(at start (not (drone2-busy)))
		(at end (drone2-busy))
		(at start (drone2-fly))
		(at end (drone2-fly))
		(over all (drone2-fly))
		(at start (not (rome-bombed)))
		(over all (inside (rome-region (drone2-x) (drone2-y))))
		(over all (invasion-ongoing))
	)
	:effect (and
		(at start (drone2-busy))
		(at end (not (drone2-busy)))
		(at end (rome-bombed))
	)
)
(:durative-action undock-drone2
	:parameters ()
	:duration (and (>= ?duration 0.1) (<= ?duration 0.1))
	:condition (and
		(at start (invasion-ongoing))
		(at end (invasion-ongoing))
		(at start (ship-fly))
		(over all (ship-fly))
		(at end (ship-fly))
		(at start (drone2-first-undock))
		(at start (not (drone2-fly)))
		(at start (not (drone2-undocking)))
		(at end (inside (ship-range (ship-x) (ship-y) (drone2-x) (drone2-y))))
		(at end (drone2-fly))
	)
	:effect (and
		(at start (drone2-undocking))
		(at end (not (drone2-undocking)))
		(at end (not (drone2-first-undock)))
		(increase (drone2-x) (* 1 (warp-speed) #t))
		(increase (drone2-y) (* 1 (warp-speed) #t))
	)
)
(:durative-action bomb-ny1
	:parameters ()
	:duration (and (>= ?duration 0.1) (<= ?duration 0.1))
	:condition (and
		(at start (not (drone1-busy)))
		(at end (drone1-busy))
		(at start (drone1-fly))
		(at end (drone1-fly))
		(over all (drone1-fly))
		(at start (not (ny-bombed)))
		(over all (inside (ny-region (drone1-x) (drone1-y))))
		(over all (invasion-ongoing))
	)
	:effect (and
		(at start (drone1-busy))
		(at end (not (drone1-busy)))
		(at end (ny-bombed))
	)
)
(:durative-action bomb-paris1
	:parameters ()
	:duration (and (>= ?duration 0.1) (<= ?duration 0.1))
	:condition (and
		(at start (not (drone1-busy)))
		(at end (drone1-busy))
		(at start (drone1-fly))
		(at end (drone1-fly))
		(over all (drone1-fly))
		(at start (not (paris-bombed)))
		(over all (inside (paris-region (drone1-x) (drone1-y))))
		(over all (invasion-ongoing))
	)
	:effect (and
		(at start (drone1-busy))
		(at end (not (drone1-busy)))
		(at end (paris-bombed))
	)
)
(:durative-action fly-ship
	:parameters ()
	:duration (and (>= ?duration 0.1) (<= ?duration 200.0))
	:condition (and
		(over all (invasion-ongoing))
		(over all (inside (earth (ship-x) (ship-y))))
		(at start (not (ship-fly)))
		(at start (not (invasion-started)))
	)
	:effect (and
		(increase (ship-x) (* 1 (vx-ship) #t))
		(increase (ship-y) (* 1 (vy-ship) #t))
		(at start (ship-fly))
		(at end (not (ship-fly)))
		(at start (invasion-started))
	)
)
(:durative-action fly-drone2
	:parameters ()
	:duration (and (>= ?duration 0.1) (<= ?duration 200.0))
	:condition (and
		(at start (invasion-ongoing))
		(at end (invasion-ongoing))
		(at start (ship-fly))
		(over all (ship-fly))
		(at end (ship-fly))
		(at start (inside (earth (drone2-x) (drone2-y))))
		(over all (inside (earth (drone2-x) (drone2-y))))
		(at start (drone2-undocking))
		(at start (not (drone2-fly)))
		(over all (inside (earth (drone2-x) (drone2-y))))
		(at start (inside (ship-range (ship-x) (ship-y) (drone2-x) (drone2-y))))
		(at end (inside (ship-range (ship-x) (ship-y) (drone2-x) (drone2-y))))
		(at end (not (drone2-busy)))
	)
	:effect (and
		(at start (drone2-fly))
		(at end (not (drone2-fly)))
		(increase (drone2-x) (* 1 (vx-drone2) #t))
		(increase (drone2-y) (* 1 (vy-drone2) #t))
	)
)
(:durative-action bomb-sf2
	:parameters ()
	:duration (and (>= ?duration 0.1) (<= ?duration 0.1))
	:condition (and
		(at start (not (drone2-busy)))
		(at end (drone2-busy))
		(at start (drone2-fly))
		(at end (drone2-fly))
		(over all (drone2-fly))
		(at start (not (sf-bombed)))
		(over all (inside (sf-region (drone2-x) (drone2-y))))
		(over all (invasion-ongoing))
	)
	:effect (and
		(at start (drone2-busy))
		(at end (not (drone2-busy)))
		(at end (sf-bombed))
	)
)
(:durative-action start-invasion
	:parameters ()
	:duration (and (>= ?duration 0.1) (<= ?duration 0.1))
	:condition (and
		(at start (not (invasion-ongoing)))
		(at start (not (london-bombed)))
		(at start (not (paris-bombed)))
		(at start (not (rome-bombed)))
		(at start (not (sf-bombed)))
		(at start (not (ny-bombed)))
		(at start (first-time))
		(at start (not (invasion-started)))
	)
	:effect (and
		(at start (not (first-time)))
		(at end (invasion-ongoing))
	)
)
(:durative-action bomb-london2
	:parameters ()
	:duration (and (>= ?duration 0.1) (<= ?duration 0.1))
	:condition (and
		(at start (not (drone2-busy)))
		(at end (drone2-busy))
		(at start (drone2-fly))
		(at end (drone2-fly))
		(over all (drone2-fly))
		(at start (not (london-bombed)))
		(over all (inside (london-region (drone2-x) (drone2-y))))
		(over all (invasion-ongoing))
	)
	:effect (and
		(at start (drone2-busy))
		(at end (not (drone2-busy)))
		(at end (london-bombed))
	)
)
(:durative-action bomb-london1
	:parameters ()
	:duration (and (>= ?duration 0.1) (<= ?duration 0.1))
	:condition (and
		(at start (not (drone1-busy)))
		(at end (drone1-busy))
		(over all (invasion-ongoing))
		(at start (drone1-fly))
		(at end (drone1-fly))
		(over all (drone1-fly))
		(at start (not (london-bombed)))
		(over all (inside (london-region (drone1-x) (drone1-y))))
		(over all (invasion-ongoing))
	)
	:effect (and
		(at start (drone1-busy))
		(at end (not (drone1-busy)))
		(at end (london-bombed))
	)
)
(:durative-action threat-whitehouse
	:parameters ()
	:duration (and (>= ?duration 0.1) (<= ?duration 0.1))
	:condition (and
		(over all (inside (wdc-region (ship-x) (ship-y))))
		(at start (london-bombed))
		(at start (paris-bombed))
		(at start (rome-bombed))
		(at start (ny-bombed))
		(at start (sf-bombed))
	)
	:effect (and
		(at end (not (invasion-ongoing)))
		(at end (above-whitehouse))
	)
)
(:durative-action bomb-rome1
	:parameters ()
	:duration (and (>= ?duration 0.1) (<= ?duration 0.1))
	:condition (and
		(at start (not (drone1-busy)))
		(at end (drone1-busy))
		(at start (drone1-fly))
		(at end (drone1-fly))
		(over all (drone1-fly))
		(at start (not (rome-bombed)))
		(over all (inside (rome-region (drone1-x) (drone1-y))))
		(over all (invasion-ongoing))
	)
	:effect (and
		(at start (drone1-busy))
		(at end (not (drone1-busy)))
		(at end (rome-bombed))
	)
)
(:durative-action bomb-ny2
	:parameters ()
	:duration (and (>= ?duration 0.1) (<= ?duration 0.1))
	:condition (and
		(at start (not (drone2-busy)))
		(at end (drone2-busy))
		(at start (drone2-fly))
		(at end (drone2-fly))
		(over all (drone2-fly))
		(at start (not (ny-bombed)))
		(over all (inside (ny-region (drone2-x) (drone2-y))))
		(over all (invasion-ongoing))
	)
	:effect (and
		(at start (drone2-busy))
		(at end (not (drone2-busy)))
		(at end (ny-bombed))
	)
)
(:durative-action bomb-sf1
	:parameters ()
	:duration (and (>= ?duration 0.1) (<= ?duration 0.1))
	:condition (and
		(at start (not (drone1-busy)))
		(at end (drone1-busy))
		(at start (drone1-fly))
		(at end (drone1-fly))
		(over all (drone1-fly))
		(at start (not (sf-bombed)))
		(over all (inside (sf-region (drone1-x) (drone1-y))))
		(over all (invasion-ongoing))
	)
	:effect (and
		(at start (drone1-busy))
		(at end (not (drone1-busy)))
		(at end (sf-bombed))
	)
)
(:durative-action bomb-paris2
	:parameters ()
	:duration (and (>= ?duration 0.1) (<= ?duration 0.1))
	:condition (and
		(at start (not (drone2-busy)))
		(at end (drone2-busy))
		(at start (drone2-fly))
		(at end (drone2-fly))
		(over all (drone2-fly))
		(at start (not (paris-bombed)))
		(over all (inside (paris-region (drone2-x) (drone2-y))))
		(over all (invasion-ongoing))
	)
	:effect (and
		(at start (drone2-busy))
		(at end (not (drone2-busy)))
		(at end (paris-bombed))
	)
)
(:durative-action fly-drone1
	:parameters ()
	:duration (and (>= ?duration 0.1) (<= ?duration 200.0))
	:condition (and
		(at start (invasion-ongoing))
		(at end (invasion-ongoing))
		(at start (ship-fly))
		(over all (ship-fly))
		(at end (ship-fly))
		(at start (inside (earth (drone1-x) (drone1-y))))
		(over all (inside (earth (drone1-x) (drone1-y))))
		(at start (drone1-undocking))
		(at start (not (drone1-fly)))
		(over all (inside (earth (drone1-x) (drone1-y))))
		(at start (inside (ship-range (ship-x) (ship-y) (drone1-x) (drone1-y))))
		(at end (inside (ship-range (ship-x) (ship-y) (drone1-x) (drone1-y))))
		(at end (not (drone1-busy)))
	)
	:effect (and
		(at start (drone1-fly))
		(at end (not (drone1-fly)))
		(increase (drone1-x) (* 1 (vx-drone1) #t))
		(increase (drone1-y) (* 1 (vy-drone1) #t))
	)
)
)